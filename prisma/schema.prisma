generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id               String                    @id @default(uuid())
  userName         String                    @unique
  firstName        String
  lastName         String
  email            String                    @unique
  hashedPassword   String
  userProfileId    String                    @unique
  profile          UserProfile               @relation(fields: [userProfileId], references: [id])
  userPreferenceId String                    @unique
  preference       UserPreference            @relation(fields: [userPreferenceId], references: [id])
  blogs            Blog[]                    @relation("WrittenBlogs")
  likedBlogs       Blog[]                    @relation("LikedBlogs")
  bookmaredBlogs   Blog[]                    @relation("BookmarkedBlogs")
  commentsPosted   Comment[]                 @relation("CommentsPosted")
  commentsLiked    Comment[]                 @relation("CommentsLiked")
  followers        User[]                    @relation("UserFollowing")
  following        User[]                    @relation("UserFollowing")
  notificationList BlogPublishNotification[] @relation("UserNotificationList")
  createdAt        DateTime                  @default(now())
  updatedAt        DateTime                  @updatedAt
}

model UserProfile {
  id        String  @id @default(uuid())
  bio       String?
  location  String?
  work      String?
  userImage String?
  gender    GENDER?
  education String?
  user      User?
}

model UserPreference {
  id            String  @id @default(uuid())
  theme         THEME?
  receiveEmails Boolean @default(true)
  user          User?
}

model Blog {
  id        String    @id @default(uuid())
  title     String
  body      String
  tags      Tag[]
  views     Int       @default(0)
  authorId  String
  author    User      @relation("WrittenBlogs", fields: [authorId], references: [id])
  likes     User[]    @relation("LikedBlogs")
  bookmarks User[]    @relation("BookmarkedBlogs")
  comments  Comment[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([authorId])
}

model Tag {
  id        String   @id @default(uuid())
  title     String   @unique
  blogs     Blog[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Comment {
  id        String   @id @default(uuid())
  body      String
  blogId    String
  blog      Blog     @relation(fields: [blogId], references: [id])
  userId    String
  user      User     @relation("CommentsPosted", fields: [userId], references: [id])
  likes     User[]   @relation("CommentsLiked")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([blogId, userId])
}

model BlogPublishNotification {
  id        String   @id @default(uuid())
  message   String
  url       String
  userId    String
  user      User     @relation("UserNotificationList", fields: [userId], references: [id])
  createdAt DateTime @default(now())

  @@index([userId])
}

enum GENDER {
  MALE
  FEMALE
  TRANSGENDER
  OTHER
}

enum THEME {
  LIGHT
  DARK
}
